@page "/createevent"
@using EventEaseApp.Data
@inject EventService EventService

<div class="container">
    <h2>Create Event</h2>
    <EditForm Model="newEvent" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="eventName">Event Name:</label>
            <InputText id="eventName" class="form-control" @bind-Value="newEvent.EventName" @oninput="HideSuccessMessage" />
            <ValidationMessage For="@(() => newEvent.EventName)" />
        </div>

        <div class="form-group">
            <label for="eventDate">Event Date:</label>
            <InputDate id="eventDate" class="form-control" @bind-Value="newEvent.EventDate" @oninput="HideSuccessMessage" />
            <ValidationMessage For="@(() => newEvent.EventDate)" />
        </div>

        <div class="form-group">
            <label for="eventLocation">Event Location:</label>
            <InputText id="eventLocation" class="form-control" @bind-Value="newEvent.EventLocation" @oninput="HideSuccessMessage" />
            <ValidationMessage For="@(() => newEvent.EventLocation)" />
        </div>

        <button type="submit" class="btn btn-primary">Create Event</button>
    </EditForm>
</div>

@code {
    private EventModel newEvent = new EventModel();
    private bool showSuccessMessage = false;

    private async Task HandleValidSubmit()
    {
        EventService.AddEvent(newEvent);
        showSuccessMessage = true;
        newEvent = new EventModel(); // Reset the form

        await Task.Delay(8000);
        showSuccessMessage = false;
        StateHasChanged();
    }

    private void HandleInvalidSubmit()
    {
        // Hide the success message on invalid submit
        showSuccessMessage = false;
        StateHasChanged();
    }

    private void HideSuccessMessage(ChangeEventArgs e)
    {
        // Hide the success message when the user starts typing again
        showSuccessMessage = false;
        StateHasChanged();
    }
}
